slug: nomad-on-windows
id: m4sfchjwb8om
type: track
title: Run Nomad Jobs on Windows
teaser: |
  Run Nomad jobs on Windows using the Docker, Java, and Raw Exec Drivers.
description: |-
  This track sets up a Nomad/Consul cluster for you on Windows Server 2019. It then guides you through the process of running 3 Nomad jobs on that cluster that use 3 different Nomad task drivers:
    * The first uses the [Docker Driver](https://www.nomadproject.io/docs/drivers/docker) to run Windows IIS inside a Docker container.
    * The second uses the [Java Driver](https://www.nomadproject.io/docs/drivers/java) to run the CI/CD solution, Jenkins.
    * The third runs a parameterized Nomad batch job that uses Nomad's [Raw Fork/Exec Driver](https://www.nomadproject.io/docs/drivers/raw_exec) to launch a compiled DotNet application.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/nomad.png
tags:
- nomad
- windows
- docker
- java
- dotnet
owner: hashicorp
developers:
- roger@hashicorp.com
private: true
published: true
show_timer: true
challenges:
- slug: verify-nomad-cluster-health
  id: gkyrdoguwa1q
  type: challenge
  title: Verify the Health of Your Nomad Cluster
  teaser: |
    Verify the health of the Nomad cluster that has been deployed for you.
  assignment: |-
    In this challenge, you will verify the health of the Nomad cluster that has been deployed for you on Windows Server 2019 VMs by the track's setup scripts. This will include checking the health of a Consul cluster that has been set up on the same VMs.

    You can visit the Google Cloud Console for the GCP project of your instance of the Instruqt track by selecting the "Google Console Link" tab, right-clicking the Project ID for the "nomad" Google cloud project, and then opening the console in a new tab or window. If you already have your own GCP account, it will be easier to use an incognito window. Either way, you will have to paste the Email and then the Password from the "Google Console Link" tab into the dialog screens that will be displayed. You will then have to click an "Accept" button. Finally, after the Google Cloud Console is displayed, you will have to click a checkbox and agree to the terms of service by clicking the "Agree and Continue" button.

    You can see the VMs that were created for you by clicking the icon with 3 horizontal bars in the upper left corner of the console, selecting the "Compute Engine" menu, and then selecting "VM Instances".

    The cluster is running 1 Nomad/Consul server and 3 Nomad/Consul clients with Nomad 1.0.0 and Consul 1.9.0. These VMs have been created in a GCP project within this Instruqt track.

    Additionally, OpenJDK 11 has been installed for you so that you can use Nomad's Java driver if desired.

    First, determine the public IP of your Nomad server by running this command on the "Google CLI" tab:
    ```
    echo $nomad_server_ip
    ```

    You can visit the Nomad UI in any browser tab outside the Instruqt tab with the URL, `http://<NOMAD_IP>:4646` where <NOMAD_IP\> is the value of $nomad_server_ip.

    You can visit the Consul UI in any browser tab outside the Instruqt tab with the URL, `http://<NOMAD_IP>:8500` where <NOMAD_IP\> is the value of $nomad_server_ip.

    SSH to the Nomad server with this command:
    ```
    sshpass -e ssh hashistack@$nomad_server_ip
    ```

    Next, verify that all 4 Consul agents are running and connected to the cluster by running this command on the "Google CLI" tab:
    ```
    consul members
    ```
    You should see 4 Consul agents with the "alive" status including 1 server and 3 clients.

    Check that the Nomad server is running by running this command on the "Google CLI" tab:
    ```
    nomad server members
    ```
    You should see 1 Nomad server with the "alive" status.

    Check the status of the Nomad client nodes by running this command on the "Google CLI" tab:
    ```
    nomad node status
    ```
    You should see 3 Nomad clients with the "ready" status.

    You can validate that Java has been installed by on the server by running `java -version`. This will return the version of Java that was installed.

    You can validate that Docker is available on the server by running `docker ps`. This should show that there are currently no Docker containers running. If you get an error, use the process described below to fix Docker on the Nomad server.

    You can also verify that Java and Docker are available on all 3 Nomad clients by inspecting them in the Nomad UI. The Driver Status section of each of them should show small green boxes with "Healthy" next to them. You should also see that the Raw Exec driver is enabled and healthy on all 3 clients.

    Type `exit` to quit the SSH session for the Nomad server.

    If the Docker driver was not healthy on any of the Nomad clients, you can fix this by doing the following:
      * SSH to that Nomad client with `sshpass -e ssh hashistack@$nomad_client_<n>_ip` where <n\> is the number of the Nomad client that did not have a healthy Docker driver.
      * On that Nomad client, run `sc start Docker` to start Docker. If this is successful, you should see multiple lines of output, none of which contain errors.
      * Run `docker ps` to test that you can now list running Docker containers on this Nomad client.
      * Check in the Nomad UI that the Docker driver is now marked Healthy for this client.
      * Type `exit` to quit the SSH session.
    Repeat the above steps for any other Nomad clients that do not have a healthy Docker driver. You can also fix Docker on the Nomad server with this procedure.

    In the next challenge, you will run Java, Docker, and DotNet jobs on the Nomad clients.
  notes:
  - type: text
    contents: |-
      In this challenge, you will verify the health of the Nomad cluster that has been deployed for you by the track's setup scripts. This will include checking the health of a Consul cluster that has been set up on the same VMs. The cluster is running on Windows Server 2019 VMs.

      You will also validate that the Java, Docker, and Raw Exec drivers are enabled and healthy on all 3 Nomad clients.

      In a second challenge, you will run 3 jobs on the Nomad clients, using these 3 Nomad drivers.
  tabs:
  - title: Google CLI
    type: terminal
    hostname: cloud-client
  - title: Google Console Link
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
- slug: run-nomad-jobs
  id: bsm9lcovj1to
  type: challenge
  title: Run Java, Docker, and DotNet Jobs
  teaser: |
    Run Java, Docker, and DotNet jobs on your Windows Nomad clients.
  assignment: |-
    ## Introduction
    In this challenge, you will run three Nomad jobs that all deploy workloads to the Nomad clients running on Windows.
      * The first uses the [Docker Driver](https://www.nomadproject.io/docs/drivers/docker) to run Windows IIS inside a Docker container.
      * The second uses the [Java Driver](https://www.nomadproject.io/docs/drivers/java) to run the CI/CD solution, Jenkins.
      * The third runs a parameterized Nomad batch job that uses Nomad's [Raw Fork/Exec Driver](https://www.nomadproject.io/docs/drivers/raw_exec) to launch a compiled DotNet application.

    To get started, please SSH to your Nomad server with the following command:
    ```
    sshpass -e ssh hashistack@$nomad_server_ip
    ```

    Navigate to the c:\Users\hashistack\nomad directory with this command:
    ```
    cd nomad
    ```

    ## Run Windows IIS with the Docker Driver
    Run the Windows IIS job that uses the Docker driver with this command:
    ```
    nomad job run iis.nomad
    ```

    Visit the Nomad UI, visit the Jobs screen, select the `iis` job and verify that 1 allocation becomes healthy within about 5 minutes. The Docker image is quite big, so it takes about 10 minutes for Nomad to download it.

    While Nomad is downloading the IIS docker image, go ahead and run the other two jobs.

    ## Run Jenkins with the Java Driver
    Run the Jenkins job that uses the Java driver with this command:
    ```
    nomad job run jenkins.nomad
    ```

    Visit the Nomad UI that you launched in the first challenge, visit the Jobs screen, select the `jenkins` job and verify that 1 allocation becomes healthy within a minute or two.

    You can also check the status of the Jenkins job with this command:
    ```
    nomad job status jenkins
    ```
    You might need to run that a few times before you see the healthy allocation.

    ## Run a Batch Job with the Raw Exec Driver
    The "batchjob.nomad" file contains a parameterized batch job that runs a multi-threaded Windows DotNet application that determines whether numbers are prime or not. It is run by the Raw Exec driver and runs until the time set by `TTL` parameter passed to it has passed. We will first register the job and then dispatch a parameterized instance of it.

    Register the job with this command:
    ```
    nomad job run batchjob.nomad
    ```

    Visit the Nomad UI, visit the Jobs screen, select the `batchjob` job, and verify that it is running.

    Then dispatch an instance of the batch job that will run for 120 seconds with this command:
    ```
    nomad job dispatch -meta TTL=120 batchjob
    ```

    Visit the Nomad UI to verify that an instance of the batchjob job has been dispatched. Then drill into the instance, the "dotnet-batch" task group, the current allocation, and the "callexe" task of the dispatched instance of the job. In the task, click on the "Files" tab, then "local", and then "repo". Open the "PrimeNumbers.txt" file to see which numbers the job has evaluated and whether they are prime numbers or not. Because the DotNet program is multi-threaded, the prime numbers will not be printed in order.

    You can also look at the "stdout" section of the "logs" tab to see pinging being done by the script until the TTL is reached.

    ## Verify Successful Deployment of IIS
    Return to the `iis` job in the Nomad UI to see how that job is doing. Select the running allocation, the task group, and the task. You will hopefully see that all 5 layers of the Docker image have been download. Unfortunately, the messages after that do not really indicate how much progress is being made. But it should not take more than 10 minutes from when you started the job. If it takes 15 minutes, Nomad will consider the image download to have failed since we configured that limit in the Nomad clients.

    After the task transitions to a running state, you can visit the IIS home page. But you first have to determine the public IP of the Nomad client it is running on. To do that, click on the link for the client the task is running on and then scroll down to find the external IP. (Don't use the internal/private IP.)

    Once you find the IP, point a browser tab to `http://<public_ip>:8000` to view the IIS home page.

    Congratulations on completing the Nomad on Windows track.
  notes:
  - type: text
    contents: |-
      In this challenge, you will run 3 Nomad jobs on your Windows Nomad clients.

      The first job will use the Docker driver to run a Windows IIS web server.

      The second job will use the Java driver to run the CI/CD solution, Jenkins.

      The third job will use the Raw Exec driver to run a DotNet application as a batch job.
  tabs:
  - title: Google CLI
    type: terminal
    hostname: cloud-client
  - title: Google Console Link
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 1800
checksum: "1639292460763758505"
