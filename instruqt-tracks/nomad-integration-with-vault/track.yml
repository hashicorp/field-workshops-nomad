slug: nomad-integration-with-vault
id: uaxe2sfai7xn
type: track
title: Nomad Integration with Vault
teaser: |
  Integrate Nomad and Vault so that applications orchestrated by Nomad can retrieve secrets from Vault.
description: |-
  In this track, you are going to explore how [Nomad](https://nomadproject.io) integrates seamlessly with [Vault](https://www.vaultproject.io) and allows applications orchestrated by Nomad to retrieve secrets from Vault.

  You will use Nomad to deploy a web application that needs to authenticate against a PostgreSQL database in order to display data to the user. Nomad will request dynamic credentials for the database from Vault. The web application will use [Consul's](https://www.consul.io) service discovery capabilities to find the database and use the credentials generated by Vault to connect to it.

  The setup scripts for this track have deployed a VM running Nomad, Consul, and Vault servers and two VMs running Nomad and Consul clients. We are not going to discuss the installation and configuration of Nomad, Consul or Vault apart from the integration of Nomad and Vault.

  If you are not familiar with all 3 products, We recommend that you explore the basic Instruqt tracks for each of these products:
    * [Nomad Basics](https://play.instruqt.com/hashicorp/tracks/nomad-basics)
    * [Consul Basics](https://play.instruqt.com/hashicorp/tracks/consul-basics)
    * [Vault Basics](https://play.instruqt.com/hashicorp/tracks/vault-basics)
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/nomad.png
tags:
- nomad
- vault
- consul
- hashistack
- integration
- orchestration
- secrets
owner: hashicorp
developers:
- pgryzan@hashicorp.com
- roger@hashicorp.com
private: false
published: true
show_timer: true
challenges:
- slug: verify-agents
  id: 0fdcftdkxkon
  type: challenge
  title: Verify that the Agents are Running
  teaser: |
    Verify that all of the server and client agents are configured and running.
  assignment: |-
    Before we begin, let's verify that our Nomad, Consul and Vault servers and both clients are running.

    Run all the following commands on the "Server" tab.

    let's check the Nomad Server by running:
    ```
    nomad server members
    ```
    You should see a message confirming 1 Nomad server is up and running.

    Next, check the Nomad client nodes by running:
    ```
    nomad node status
    ```
    You should see two Nomad client nodes.

    Now let's check the Consul Server and clients by running:
    ```
    consul members
    ```
    You should see three members, a server and two clients.

    Finally let's make sure Vault is up and running:
    ```
    vault status
    ```
    You should see a small table of Keys and Values. The "Sealed" key should be "false" because we have already unsealed it for you.

    Our next challenge will be to create the Nomad token policy for Vault.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Nomad Integration with Vault</b>
      <hr />

      In this track, you are going to explore how [Nomad](https://nomadproject.io) integrates seamlessly with [Vault](https://www.vaultproject.io) and allows your application to retrieve dynamic credentials for a database.

      You will deploy a web application that needs to authenticate against a [PostgreSQL](https://www.postgresql.org/docs) database and display data from a table to the user.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: create-the-nomad-server-policy-and-token
  id: pupryaxbz98c
  type: challenge
  title: Create a Vault Policy and Token for the Nomad Server
  teaser: |
    Create a Vault policy and token for use by the Nomad server.
  assignment: |-
    A policy named nomad-server-policy.hcl has been created for you in the vault directory of the "Files" tab. Click on the file to view how the policy has been setup.

    We are going to be mainly using files in the vault directory, so let's change the directory on the "Server" tab using the command:
    ```
    cd /root/hashistack/vault
    ```
    Next, write the nomad-server policy to Vault using the command:
    ```
    vault policy write nomad-server nomad-server-policy.hcl
    ```
    You should now see a message telling you that you succeeded.

    Run the following command to create a token for your Nomad server:
    ```
    vault token create -policy nomad-server -period 72h -orphan > /root/hashistack/nomad/nomad-token.txt
    ```

    Click on the "Files" tab and navigate to the "/root/hashistack/nomad/nomad-token.txt" file to see the output.

    Our next challenge will be to create a Vault token role that the Nomad server will use when creating Vault tokens for jobs that it runs.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Create the Nomad Server's Policy and Token</b>
      <hr />

      To use Nomad's [Vault integration](https://nomadproject.io/docs/vault-integration), you must provide a [Vault token](https://www.vaultproject.io/docs/concepts/tokens) to your Nomad server.

      The recommended approach is to give the Nomad server a periodic token with the ability to create tokens for Nomad jobs that are derived from a token role. This approach limits the Vault secrets that applications orchestrated by Nomad can read.

      In this challenge, you will create a policy and token that give the Nomad server the Vault permissions it needs.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: create-a-vault-token-role
  id: nacbsj1g0w4q
  type: challenge
  title: Create a Vault Token Role
  teaser: |
    Create a Vault token role that Nomad can give to jobs.
  assignment: |-
    If you did not read all 3 notes screens while this challenge was starting, please do that now by clicking the "notes" button in the upper right corner. After reading all of them, click the "X" button to hide the notes.

    Click on the "Files" tab and take a look at the "/root/hashistack/vault/nomad-cluster-role.json" policy. Create the token role named "nomad-cluster" by running the following command on the "Server" tab:
    ```
    vault write auth/token/roles/nomad-cluster @nomad-cluster-role.json
    ```
    You should now see a message telling you that you succeeded.

    Our next challenge will be to reconfigure Nomad to enable the Vault integration.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Create a Vault Token Role</b>
      <hr />

      At this point, you must create a [Vault Token Role](https://www.vaultproject.io/api-docs/auth/token#create-update-token-role) that Nomad can give to jobs that it runs. The token role allows you to restrict which Vault policies can be used by Nomad jobs, limiting the Vault secrets the jobs can read.
  - type: text
    contents: |-
      We will use the following token role:
      ```
      {
        "allowed_policies": "access-tables",
        "token_explicit_max_ttl": 0,
        "name": "nomad-cluster",
        "orphan": true,
        "token_period": 259200,
        "renewable": true
      }
      ```

      Note that the "access-tables" policy is listed under the `allowed_policies` key. We have not created this policy yet, but it will be used by our web job to retrieve database credentials.
  - type: text
    contents: |-
      To allow all policies except those you explicitly prohibit to be used by jobs, specify the `disallowed_policies` key instead and list the policies that should not be granted. If you take this approach, be sure to include the `nomad-server` policy. An example of this is shown below:
      ```
      {
        "disallowed_policies": "nomad-server",
        "token_explicit_max_ttl": 0,
        "name": "nomad-cluster",
        "orphan": true,
        "token_period": 259200,
        "renewable": true
      }
      ```
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: reconfigure-the-nomad-server
  id: xzhmzl5gyglp
  type: challenge
  title: Reconfigure the Nomad Server
  teaser: |
    Enable the Vault integration on the Nomad server.
  assignment: |-
    If you did not read all 3 notes screens while this challenge was starting, please do that now by clicking the "notes" button in the upper right corner. After reading all of them, click the "X" button to hide the notes.

    Click on the "Files" tab and navigate to the "/root/hashistack/nomad/nomad-token.txt" file. Copy the value of the `token` field from the file. Click on the "server.hcl" file in the same directory. Find the "vault" stanza at the bottom and replace <b><your nomad server token\></b> with your token. Also, change <b>enabled = false</b> to <b>enabled = true</b> within the "vault" stanza.

    <b>Remember to save the file by clicking the save icon on the "Files" tab!</b>

    Note that token could also have been provided as an environment variable called VAULT_TOKEN instead of including it in the "vault" stanza.

    Note that the `create_from_role` key in the "vault" stanza is set to the "nomad-cluster" token role that you created in the last challenge. So, we are using both the token you created two challenges ago and the token role you created in the last challenge.

    Next, restart the Nomad server by running;
    ```
    systemctl restart nomad
    ```
    The Nomad server is now integrated with Vault and its Vault token will be renewed automatically.

    Our next challenge will be to deploy a PostgeSQL database with a Nomad job.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Reconfigure the Nomad Server</b>
      <hr />

      At this point, you are ready to edit the "vault" stanza in the Nomad server's configuration file, "/root/hashistack/nomad/nomad.hcl". You will add the token you generated two challenges ago and also enable the Vault integration.
  - type: text
    contents: |-
      The "vault" stanza will end up looking like this:
      ```
      vault {
        enabled = true
        address = "http://active.vault.service.consul:8200"
        task_token_ttl = "1h"
        create_from_role = "nomad-cluster"
        token = "s.1234567890abcdefghijklmnop"
      }
      ```

      The Nomad server will renew the token automatically since it is a periodic token.
  - type: text
    contents: |-
      Nomad's Vault integration also needs be enabled on the Nomad clients, but this has already been done for you. The "vault" stanza on the clients looks like this:
      ```
      vault {
        enabled = true
        address = "http://active.vault.service.consul:8200"
      }
      ```

      Note that the Nomad clients are not given a Vault token.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: deploy-a-database
  id: oqxicv3yeiqo
  type: challenge
  title: Deploy a Database
  teaser: |
    Deploy a PostgreSQL database with Nomad.
  assignment: |-
    A Nomad job has been created for you to deploy a PostgreSQL database. Click on the "Files" tab and navigate to the "/root/hashistack/nomad/db.nomad" file to see the details of the job.

    We are deploying a pre-populated PostgreSQL database docker container to either client. We are mapping the container port 5432 to a static port 5432 on the host.

    Click on the "Server" tab and run the job using the following command:
    ```
    nomad run /root/hashistack/nomad/db.nomad
    ```
    After waiting about 30 seconds, verify the job is running with the following command:
    ```
    nomad status database
    ```
    You should see a summary of the database job that shows its status as "running". If it is not running, wait 15 seconds and re-run the command. Eventually, the "db" task group should have 1 healthy allocation. You can also explore the job details in the Nomad UI on the "Nomad" tab.

    Our next challenge will be to configure the Vault Database Secrets Engine.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Deploy a Database with Nomad</b>
      <hr />

      The next few steps will involve configuring a connection between Vault and our database, so let's deploy one that we can connect to.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: configure-the-vault-database-secrets-engine
  id: pixcf2zd2fzd
  type: challenge
  title: Configure the Vault Database Secrets Engine
  teaser: |
    Allow Vault to generate dynamic credentials for the PostgreSQL database.
  assignment: |-
    If you did not read all 5 notes screens while this challenge was starting, please do that now by clicking the "notes" button in the upper right corner. After reading all of them, click the "X" button to hide the notes.

    Let's start off by enabling the Database Secrets Engine by running the following command on the "Server" tab;
    ```
    vault secrets enable database
    ```
    You should see a message indicating success.

    A database connection file has been created for you. Take a look at it by clicking on the "Files" tab and navigating to the "/root/hashistack/vault/connection.json" file.

    Run the following command to configure the connection between the database secrets engine and our database:
    ```
    vault write database/config/postgresql @connection.json
    ```
    If the operation is successful, there will be no output.

    Click on the "Files" tab and navigate to the "/root/hashistack/vault/accessdb.sql" file. Recall from the previous step that we specified accessdb in the allowed_roles key of our connection information.

    Run the following command to create the role:
    ```
    vault write database/roles/accessdb db_name=postgresql creation_statements=@accessdb.sql default_ttl=1h max_ttl=24h
    ```
    You should see a message indicating success.

    Finally, let's verify that we can generate PostgreSQL credentials from the database secrets engine by running the following command:
    ```
    vault read database/creds/accessdb
    ```
    You should see a table listing a username and password.

    A policy file that allows retrieval of PostgreSQL credentials from the database secrets engine has been created for you. Take a look at it by clicking on the "Files" tab and navigating to the "/root/hashistack/vault/access-tables-policy.hcl" file. We need to create this policy to restrict who can request dynamic credentials from the database secrets engine.

    Create the access-tables policy with the following command:
    ```
    vault policy write access-tables access-tables-policy.hcl
    ```
    You should see a success message as confirmation.

    Our next challenge will be to deploy the web application with Nomad.

    Click the "Check" button in the lower right to complete the challenge.
  notes:
  - type: text
    contents: |-
      <b>Configure Vault's Database Secrets Engine</b>
      <hr />

      We are using Vault's [Database Secrets Engine](https://www.vaultproject.io/docs/secrets/databases) in this challenge so that we can generate dynamic credentials for our PostgreSQL database. We'll start by enabling the database secrets engine for Vault.
  - type: text
    contents: |-
      You will set up the database secrets engine's connection with the following data:
      ```
      {
        "plugin_name": "postgresql-database-plugin",
        "allowed_roles": "accessdb",
        "connection_url": "postgresql://{{username}}:{{password}}@database.service.consul:5432/postgres?sslmode=disable",
        "username": "demo",
        "password": "demo"
      }
      ```
  - type: text
    contents: |-
      We have specified "accessdb" in the `allowed_roles` key of our connection information. We will create the "accessdb" role for the database secrets engine soon.

      The information in the database connection in the previous note allows Vault to connect to our database and create users with specific privileges.

      In a production setting, it is recommended to give Vault credentials with enough privileges to generate database credentials dynamically and to manage their lifecycle.
  - type: text
    contents: |-
      When you create the "accessdb" role, you will use the following SQL in the "creation_statements" parameter:
      ```
      CREATE USER "{{name}}" WITH ENCRYPTED PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';
      ALTER USER "{{name}}" WITH SUPERUSER;
      ```

      In our case, the dynamic database user will have broad privileges that include the ability to read from the tables that our application will need to access.
  - type: text
    contents: |-
      Finally, we need to create the "access-tables" policy that was referenced in the "allowed_policies" key of the token role we created earlier. Tokens given this policy will be able to read dynamic database credentials from the "database/creds/accessdb" path in Vault.
      ```
      path "database/creds/accessdb" {
        capabilities = ["read"]
      }
      ```

      The Nomad "web" job will be assigned this policy.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  difficulty: basic
  timelimit: 600
- slug: deploy-an-application
  id: o6kmjfztauxg
  type: challenge
  title: Deploy a Web Application
  teaser: |
    Deploy a web application with the appropriate policy and templating.
  assignment: |-
    If you did not read all 4 notes screens while this challenge was starting, please do that now by clicking the "notes" button in the upper right corner. After reading all of them, click the "X" button to hide the notes.

    The Nomad job file has been also been created for you and you can take a look at it by clicking on the "Files" tab and navigating to the "/root/hashistack/nomad/web.nomad" file.

    Note that the job's "vault" stanza indicates that the job can use the "access-tables" policy.

    Run the Nomad job by running the command:
    ```
    nomad run /root/hashistack/nomad/web.nomad
    ```
    Click on the "Nomad" tab and wait until the job has been successfully deployed in the Nomad UI as indicated by a green bar in the Summary column for the "web" job in the list of jobs. Alternatively, you can run the `nomad status web` command until it shows the status of the web job as "running" and the "demo" task group has 1 healthy allocation.

    After waiting about 30 seconds, confirm that the application is accessing the database by running two commands on the "Server" tab.

    First, use the dig command to query the SRV record of your service and obtain the port it is using:
    ```
    dig +short SRV web.service.consul.
    ```
    The response should look similar to:<br>
    `
    1 1 3000 hashistack-client-1.node.instruqt.consul.
    `<br>

    Next curl your service at the appropriate port and names path:
    ```
    curl http://web.service.consul:3000/api | jq
    ```
    The response should return json from the api.

    Finally, click on the "Application" tab to view the web application. All of the content, links and image locations come from the database. You should see all 6 HashiCorp products.

    Click the "Check" button in the lower right to complete the challenge.

    Congratulations on finishing the Nomad Integration with Vault track!
  notes:
  - type: text
    contents: |-
      <b>Deploy a Web Application with Nomad</b>
      <hr />

      Now we are ready to deploy our web application and give it the necessary Vault policy and configuration to communicate with our database.
  - type: text
    contents: |-
      When you look at the job specification for the web job, you will see the following "vault" stanza:
      ```
      vault {
        policies = ["access-tables"]
      }
      ```

      This assigns the job the "access-tables" policy so that it can request database credentials from Vault.
  - type: text
    contents: |-
      We are using the "template" stanza's vault integration to populate a configuration file that our application needs.

      The underlying tool being used is [Consul Template](https://learn.hashicorp.com/consul/developer-configuration/consul-template), which is built into Nomad and can populate files with data from Consul's key/value store and from Vault secrets.
  - type: text
    contents: |-
      The "template" stanza of the job specification for the web job includes the following:
      ```
      {{ with secret "database/creds/accessdb" }}
        DB_USERNAME="{{ .Data.username }}"
        DB_PASSWORD="{{ .Data.password }}"
      {{ end }}
      ```

      This tells the Consul Template sub-system of Nomad to retrive the dynamically generated username and password for the database from the "database/creds/accessdb" path on the Vault server and to store the "username" and "password" keys of that secret in the given variables within the task.
  tabs:
  - title: Files
    type: code
    hostname: hashistack-server
    path: /root/hashistack/
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Nomad
    type: service
    hostname: hashistack-server
    port: 4646
  - title: Consul
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Vault
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Application
    type: service
    hostname: hashistack-client-1
    port: 3000
  difficulty: basic
  timelimit: 600
checksum: "2892906142788089192"
